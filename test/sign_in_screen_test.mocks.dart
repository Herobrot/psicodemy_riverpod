// Mocks generated by Mockito 5.4.6 from annotations
// in psicodemy/test/sign_in_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:psicodemy/core/services/auth/auth_service.dart' as _i3;
import 'package:psicodemy/core/services/auth/models/complete_user_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCompleteUserModel_0 extends _i1.SmartFake
    implements _i2.CompleteUserModel {
  _FakeCompleteUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.CompleteUserModel?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i2.CompleteUserModel?>.empty(),
          )
          as _i4.Stream<_i2.CompleteUserModel?>);

  @override
  _i4.Future<_i2.CompleteUserModel> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i2.CompleteUserModel>.value(
              _FakeCompleteUserModel_0(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.CompleteUserModel>);

  @override
  _i4.Future<_i2.CompleteUserModel> signUpWithEmailAndPassword(
    String? email,
    String? password, {
    String? codigoTutor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #signUpWithEmailAndPassword,
              [email, password],
              {#codigoTutor: codigoTutor},
            ),
            returnValue: _i4.Future<_i2.CompleteUserModel>.value(
              _FakeCompleteUserModel_0(
                this,
                Invocation.method(
                  #signUpWithEmailAndPassword,
                  [email, password],
                  {#codigoTutor: codigoTutor},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.CompleteUserModel>);

  @override
  _i4.Future<_i2.CompleteUserModel> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i4.Future<_i2.CompleteUserModel>.value(
              _FakeCompleteUserModel_0(
                this,
                Invocation.method(#signInWithGoogle, []),
              ),
            ),
          )
          as _i4.Future<_i2.CompleteUserModel>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.CompleteUserModel?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.CompleteUserModel?>.value(),
          )
          as _i4.Future<_i2.CompleteUserModel?>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [email]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
