import '../entities/forum_entity.dart';
import '../repositories/forum_repository_interface.dart';

class ForumUseCases {
  final ForumRepository _forumRepository;

  ForumUseCases(this._forumRepository);

  // Post management use cases
  Future<List<ForumPostEntity>> getPosts({
    ForumCategory? category,
    int limit = 20,
  }) async {
    return await _forumRepository.getPosts(category: category, limit: limit);
  }

  Future<ForumPostEntity?> getPostById(String postId) async {
    final post = await _forumRepository.getPostById(postId);
    if (post != null) {
      // Increment view count
      await _forumRepository.incrementPostViews(postId);
    }
    return post;
  }

  Future<ForumPostEntity> createPost({
    required String title,
    required String content,
    required String authorId,
    required String authorName,
    required ForumCategory category,
    List<String> tags = const [],
    bool isAnonymous = false,
    List<String>? imageUrls,
  }) async {
    final post = ForumPostEntity(
      id: '', // Will be generated by repository
      title: title,
      content: content,
      authorId: authorId,
      authorName: authorName,
      createdAt: DateTime.now(),
      category: category,
      tags: tags,
      isAnonymous: isAnonymous,
      imageUrls: imageUrls,
      status: PostStatus.published,
    );
    return await _forumRepository.createPost(post);
  }

  Future<ForumPostEntity> updatePost(ForumPostEntity post) async {
    final updatedPost = post.copyWith(updatedAt: DateTime.now());
    return await _forumRepository.updatePost(updatedPost);
  }

  Future<void> deletePost(String postId) async {
    await _forumRepository.deletePost(postId);
  }

  // Comment management use cases
  Future<List<ForumCommentEntity>> getComments(String postId) async {
    return await _forumRepository.getComments(postId);
  }

  Future<ForumCommentEntity> createComment({
    required String postId,
    required String content,
    required String authorId,
    required String authorName,
    bool isAnonymous = false,
    String? replyToCommentId,
  }) async {
    final comment = ForumCommentEntity(
      id: '', // Will be generated by repository
      postId: postId,
      content: content,
      authorId: authorId,
      authorName: authorName,
      createdAt: DateTime.now(),
      isAnonymous: isAnonymous,
      replyToCommentId: replyToCommentId,
    );
    return await _forumRepository.createComment(comment);
  }

  Future<void> deleteComment(String commentId) async {
    await _forumRepository.deleteComment(commentId);
  }

  // Interaction use cases
  Future<void> togglePostLike(String postId) async {
    // This would need to check current like status first
    // For now, just call like
    await _forumRepository.likePost(postId);
  }

  Future<void> toggleCommentLike(String commentId) async {
    // This would need to check current like status first
    // For now, just call like
    await _forumRepository.likeComment(commentId);
  }

  // Search and filter use cases
  Future<List<ForumPostEntity>> searchPosts(String query) async {
    return await _forumRepository.searchPosts(query);
  }

  Future<List<ForumPostEntity>> getPostsByCategory(ForumCategory category) async {
    return await _forumRepository.getPostsByCategory(category);
  }

  Future<List<ForumPostEntity>> getMyPosts(String userId) async {
    return await _forumRepository.getPostsByUser(userId);
  }

  Future<List<ForumPostEntity>> getTrendingPosts() async {
    return await _forumRepository.getTrendingPosts();
  }

  Future<List<ForumPostEntity>> getFeaturedPosts() async {
    return await _forumRepository.getFeaturedPosts();
  }

  // Moderation use cases
  Future<void> reportPost(String postId, String reason) async {
    await _forumRepository.reportPost(postId, reason);
  }

  Future<void> reportComment(String commentId, String reason) async {
    await _forumRepository.reportComment(commentId, reason);
  }

  // Real-time streams
  Stream<List<ForumPostEntity>> watchPosts({ForumCategory? category}) {
    return _forumRepository.watchPosts(category: category);
  }

  Stream<List<ForumCommentEntity>> watchComments(String postId) {
    return _forumRepository.watchComments(postId);
  }
} 